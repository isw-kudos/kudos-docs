#%RAML 1.0
---
title: Huddo Boards
baseUri: https://boards.api.huddo.com
version: 1
securitySchemes:
  Pass Through:
    description: |
      Huddo Board API is accessible only to authenticated users in Huddo Boards application.
      
      Users must obtain an API key from Huddo Boards application before being able to access this api, they can do this by clicking their profile picture in the top right of the application, and choosing Advanced -> Huddo Boards API

      The API key is required for all requests defined here and must be sent as a header in the following format.

      ```Authorization: Bearer {key}```
securedBy: Pass Through
types:
  User: !include types/user.raml
  AuthUser: !include types/authuser.raml
  Alias: !include types/alias.raml
  Node: !include types/node.raml
  NodePreview: !include types/nodepreview.raml
  NodeWithChildren: !include types/board.raml
  Member: !include types/member.raml
  BoardNode:
    description: Board node includes recursive children in a tree structure as laid out in Boards application
    type: [ Node, NodeWithChildren ]
/user:
  get:
    description: Search for users
    queryParameters:
      q:
        description: name / email query
        required: true
        type: string
    responses:
      200:
        body:
          application/json:
            type: User[]
            example: !include examples/users.json
  /me:
    get:
      description: returns logged in User
      responses:
        200:
          body:
            application/json:
              type: AuthUser
/board:
  get:
    description: Search for boards
    queryParameters:
      q:
        description: search text
        required: true
        type: string
    responses:
      200:
        body:
          application/json:
            type: Node[]
  post:
    description: Create a board
    body:
      application/json:
        properties:
          name: string
          description?: string
        example: |
          {
            "name": "My Board",
            "description": "A board made with the API"
          }
  /my:
    get:
      description: get boards that I am a member of
      responses:
        200:
          body:
            application/json:
              type: Node
  /{boardId}:
    get:
      description: Get board by id (includes all nodes of the board)
      responses:
        200:
          body:
            application/json:
              type: BoardNode
  /{boardId}/members:
    get:
      queryParameters:
        expanded:
          description: Expand group members to users
          required: false
          type: boolean
      description: Get members of board
      responses:
        200:
          body:
            application/json:
              type: Member[]
      post:
        description: Add member to a board
        body:
          application/json:
            properties:
              kind:
                type: string
                enum: [ User, Group ]
                description: The kind of member to add
              id:
                type: string
                description: the id from the user or group as found from the search api `/user?q=value`
            example: |
              {
                "kind": "User",
                "id": "5b8dc66c2b4ec34eb31726a9"
              }
/node:
  post:
    description: Create a node
    body:
      application/json:
        properties:
          name: string
          boardId: string
          parentId: string
          type?:
            type: string
            enum: [ list, task, entry ]
            description: Type will default to list or task if not provided, depending on the parent node type.
          description?:
            type: string
            description: text, html or markdown supported
        example: |
          {
            "name": "New Task",
            "boardId": "5cae779ce9d01fb56c308270",
            "parentId": "5d9abe61d51749a3caa982c9",
            "type": "task",
            "description": "Task created from the API"
          }
  /{nodeId}:
    get:
      description: Get a single node
      responses:
        200:
          body:
            application/json:
              type: Node
  /{nodeId}/assign:
    post:
      description: Assign a member to a task (task nodes only)
      body:
        application/json:
          properties:
            kind:
              type: string
              description: must be set to `User`
            id:
              type: string
              description: The user id, from the members array this can be found at `member.entity.id`
          example: |
            {
              "kind": "User",
              "id": "5b8dc66c2b4ec34eb31726a9"
            }
